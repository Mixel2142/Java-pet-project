######################### App configurations ############################################
server:
  port: 8090

spring:
  application:
    name: auth-service
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
    loadbalancer:
      ribbon:
        enabled: false



logging.level.org.springframework.data.r2dbc: INFO
logging.level.com.netflix.discovery.shared.transport: ERROR
######################### DB config #########################
#spring.r2dbc.initialization-mode: always
spring.r2dbc.url: r2dbc:postgresql://${POSTGRES_HOST}/${POSTGRES_DB}
spring.r2dbc.username: ${POSTGRES_USER}
spring.r2dbc.password: ${POSTGRES_PASSWORD}

spring.flyway.url: jdbc:postgresql://${POSTGRES_HOST}/${POSTGRES_DB}
spring.flyway.user: ${POSTGRES_USER}
spring.flyway.password: ${POSTGRES_PASSWORD}

######################### SPRING BOOT ADMIN CLIENT #########################
management:
  endpoint:
    shutdown.enabled: true
    heapdump.enabled: false
    health.show-details: always
  endpoints:
    enabled-by-default: true
    web.exposure.include: "*"

######################### EUREKA client config ############################
eureka:
  instance:
    instanceId: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${random.value}}
    preferIpAddress: false
    metadata-map:
      user.name: ${ACTUATOR_LOGIN}         #These two are needed so that the server
      user.password: ${ACTUATOR_PASSWORD}    #can access the protected client endpoints
  client:
    registryFetchIntervalSeconds: 30
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: ${EUREKA_HOST}
    healthcheck:
      enabled: true
#instance.preferIpAddress в true и, когда приложение регистрируется в eureka, оно использует свой IP-адрес, а не имя хоста.

####################### SWUGGER ##################################################
springdoc.api-docs.path: /api-docs
springdoc.swagger-ui.path: /swagger-ui.html

######################### TTL Session (minuts) #######################
#server.servlet.session.timeout: 1m

# Now 1 hour
jwt.time.validity.accesstoken: 3600
# 5 * 60 * 60 :  5 часов
# Now 1 mounth
jwt.time.validity.refreshtoken: 8600000

jwt.secret: bla_bla_secret